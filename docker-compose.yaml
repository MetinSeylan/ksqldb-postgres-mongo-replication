version: '3.9'

services:
  postgres:
    hostname: postgres
    container_name: postgres
    image: quay.io/debezium/example-postgres:latest
    platform: linux/amd64
    restart: on-failure
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  mongodb:
    hostname: mongo
    container_name: mongo
    image: mongo:latest
    restart: on-failure
    ports:
      - 27017:27017

  zookeeper:
    hostname: zookeeper
    container_name: zookeeper
    image: 'bitnami/zookeeper:latest'
    restart: on-failure
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    hostname: kafka
    container_name: kafka
    image: 'bitnami/kafka:latest'
    restart: on-failure
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    platform: linux/amd64
    hostname: schema-registry
    container_name: schema-registry
    restart: on-failure
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.26.0
    platform: linux/amd64
    hostname: ksqldb-server
    container_name: ksqldb-server
    restart: on-failure
    depends_on:
      - kafka
      - schema-registry
      - connect
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"

  connect:
    image: confluentinc/cp-kafka-connect:latest
    platform: linux/amd64
    container_name: connect
    restart: on-failure
    volumes:
      - "./components/:/usr/share/kafka/plugins/"
    environment:
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_CONFIG_STORAGE_TOPIC: "_connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "_connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "_connect-statuses"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: "/usr/share/kafka/plugins"
    depends_on:
      - kafka
      - schema-registry

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.26.0
    platform: linux/amd64
    container_name: ksqldb-cli
    restart: on-failure
    depends_on:
      - kafka
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  kowl:
    container_name: kowl
    image: quay.io/cloudhut/kowl:latest
    restart: on-failure
    hostname: kowl
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      KOWL_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://schema-registry:8081"]
        connect:
          enabled: true
          clusters:
            name: connect
            url: http://connect:8083
    ports:
      - "8080:8080"
    entrypoint: /bin/sh
    command: -c "echo \"$$KOWL_CONFIG_FILE\" > /tmp/config.yml; /app/kowl"
    depends_on:
      - kafka
      - schema-registry
